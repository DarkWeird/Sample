/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.terasology.gradle.plugin;

import org.gradle.api.Project;
import org.gradle.api.Plugin;
import org.gradle.api.Task;
import org.gradle.api.plugins.JavaPluginConvention;
import org.gradle.api.tasks.Copy;
import org.gradle.api.tasks.Delete;
import org.gradle.api.tasks.SourceSet;
import org.gradle.api.tasks.Sync;
import org.gradle.api.tasks.TaskInputs;
import org.gradle.api.tasks.TaskProvider;
import org.gradle.jvm.tasks.Jar;
import org.gradle.language.jvm.tasks.ProcessResources;
import org.terasology.gradle.plugin.tasks.CacheReflection;

import java.io.File;
import java.net.URI;
import java.net.URISyntaxException;

/**
 * A simple 'hello world' plugin.
 */
public class TerasologyPlugin implements Plugin<Project> {
    public void apply(Project project) {

        configureRepositories(project);
        JavaPluginConvention convention = project.getConvention().getPlugin(JavaPluginConvention.class);
        SourceSet mainSourceSet = convention.getSourceSets().getByName("main");

        TaskProvider<CacheReflection> cacheReflection = project.getTasks()
                .register("cacheReflections", CacheReflection.class);

        cacheReflection.configure(task -> {
            task.dependsOn("classes");
            task.setInput(mainSourceSet.getOutput().getClassesDirs());
            task.setOutput(new File(project.getBuildDir(), "reflections.cache"));
        });

        TaskProvider<Delete> clearReflection = project.getTasks()
                .register("clearReflection", Delete.class);
        clearReflection.configure(task -> task.delete("reflections.cache"));

        TaskProvider<Copy> syncReflections = project.getTasks().register("syncReflections", Copy.class);
        syncReflections.configure(s -> {
            s.from("module.txt");
            s.from(project.getTasks().findByName("cacheReflections").getOutputs().getFiles());
            s.into(mainSourceSet.getOutput().getClassesDirs().getSingleFile());
            s.dependsOn(cacheReflection);
        });

        TaskProvider<Sync> syncAssets = project.getTasks().register("syncAssets", Sync.class);
        syncAssets.configure(s -> {
            s.from("assets");
            s.into(new File(mainSourceSet.getOutput().getClassesDirs().getSingleFile(), "assets"));
        });

        TaskProvider<Sync> syncOverrides = project.getTasks().register("syncOverrides", Sync.class);
        syncOverrides.configure(s -> {
            s.from("overrides");
            s.into(new File(mainSourceSet.getOutput().getClassesDirs().getSingleFile(), "overrides"));
        });
        TaskProvider<Sync> syncDeltas = project.getTasks().register("syncDeltas", Sync.class);
        syncDeltas.configure(s -> {
            s.from("deltas");
            s.into(new File(mainSourceSet.getOutput().getClassesDirs().getSingleFile(), "deltas"));
        });

        project.getTasks().getByName("jar").dependsOn(syncReflections, syncAssets, syncDeltas, syncOverrides);
    }

    private void configureRepositories(Project project) {
        project.getRepositories().maven(mav ->
        {
            try {
                mav.setUrl(new URI("http://artifactory.terasology.org/artifactory/virtual-repo-live"));
            } catch (URISyntaxException e) {
                e.printStackTrace();
            }
        });

        project.getRepositories().maven(mav ->
        {
            try {
                mav.setUrl(new URI("http://maven.snplow.com/releases"));
            } catch (URISyntaxException e) {
                e.printStackTrace();
            }
        });
        project.getRepositories().jcenter();
    }
}
